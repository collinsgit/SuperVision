# -*- coding: utf-8 -*-
"""SuperResolution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1itQENOyGQhKGwjRM1e8RfE-38lqVZbWZ
"""

import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
from keras.layers import Input, Dense, Reshape, Dropout, Flatten, Conv2D, MaxPooling2D, Conv2DTranspose
from keras.optimizers import Adam
from keras.callbacks import Callback
from keras.utils import to_categorical
from keras.layers.merge import concatenate
from sklearn.utils.class_weight import compute_class_weight
import matplotlib.pyplot as plt
import requests
import os.path as path
from bs4 import BeautifulSoup as bs

from google.colab import drive
drive.mount('/content/gdrive')
file_root = '/content/gdrive/My Drive/Colab Notebooks/'

class SynSet(object):
  def __init__(self, wnid, parent_wnid):
    self.
class ImageNetLoader(object):
    def __init__(self):
      self.api_base = "http://www.image-net.org/api/"
    def get_structure(self):
      structure_file_contents = None
      try:
        with open(path.join(file_root, "structure.xml"), "r") as f:
          structure_file_contents = f.read()
      except:
        structure_file_contents = requests.get(path.join(api_base,"structure_released.xml")).text
      try:
        with open(path.join(file_root, "structure.xml"), "w") as f:
          f.write(structure_file_contents)
      except:
        pass

with open(path.join(file_root, 'structure.xml'), 'w') as f:
  f.write("<synset>Hello</synset>")

class SynSet(object):
  def __init__(self, wnid, words, parent_wnid):
    self.wnid = wnid
    self.parent_wnid = parent_wnid
    self.words = words
    
class ImageNetLoader(object):
    def __init__(self):
      self.api_base = "http://www.image-net.org/api/"
    def get_structure(self):
      structure_file_contents = None
      try:
        with open(path.join(file_root, "structure.xml"), "r") as f:
          structure_file_contents = f.read()
      except:
        structure_file_contents = requests.get(path.join(api_base,"structure_released.xml")).text
      try:
        with open(path.join(file_root, "structure.xml"), "w") as f:
          f.write(structure_file_contents)
      except:
        pass
      structure = {}

class PlotLosses(Callback):
    def on_train_begin(self, logs={}):
        self.losses = []
        self.loss_fig = plt.figure(1)
        self.plot = True

    def on_batch_end(self, batch, logs={}):
        if batch > 1:
            self.losses.append(logs.get('loss'))

    def on_epoch_end(self, batch, logs={}):
        if self.plot:
            self.loss_fig.clear()
            plt.figure(1)
            plt.plot(self.losses)
            plt.title('Training Loss')
            plt.pause(0.0001)
            
image_size = (16, 16, 3)
activation = 'relu'
intermediate_shape = (128, 128, 3)

image_input = Input(shape=image_size)
label_input = Input(shape=(num_classes,))

x = Conv2D(32, 3, activation=activation)(image_input)
x = MaxPooling2D(2, 2)(x)

x = Conv2D(64, 3, activation=activation)(x)
x = MaxPooling2D(2, 2)(x)

x = Conv2D(128, 3, activation=activation)(x)
x = MaxPooling2D(2, 2)(x)

x = Dropout(0.4)(x)

x = Flatten()(x)
x = Dense(128*128*3*2, activation=activation)(
    concatenate([x, label_input]))

x = Dense(128*128*3, activation=activation)(
    concatenate([x, Flatten()(image_input)]))

x = Dense(np.prod(intermediate_shape), activation=activation)(x)
x = Reshape(intermediate_shape)(x)

output = x
            
model = Model(inputs=[image_input, label_input], outputs=output)

print model.summary()
            
adam = Adam(lr=1e-4)
model.compile(loss='...',
              optimizer=adam,
              metrics=['accuracy'])

history = model.fit([train_images, train_labels], train_original_images,
                    sample_weight=sample_weights,
                    validation_data=(val_images, val_labels),
                    batch_size=50,
                    epochs=200,
                    callbacks=[plot_losses])

max_val_acc = max(history.history['val_acc'])
print
print max_val_acc

